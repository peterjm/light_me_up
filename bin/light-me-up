#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative "../lib/light_me_up"
require "optimist"

brightness_help = format(
  "Set the brightness (%<min>d to %<max>d)",
  min: LightMeUp::Light.min_brightness,
  max: LightMeUp::Light.max_brightness
)
temperature_help = format(
  "Set the temperature (%<min>d to %<max>d)",
  min: LightMeUp::Light.min_temperature,
  max: LightMeUp::Light.max_temperature
)

options = Optimist.options do
  banner "Usage: #{$PROGRAM_NAME} [options]"

  opt :toggle, "Toggle whether the lights are on or off", short: "T"
  opt :on, "Turn the light on"
  opt :off, "Turn the light off", short: "O"
  opt :ip_address, "Specify the IP address", type: :string, default: ENV["ELGATO_IP_ADDRESS"]
  opt :defaults, "Set to default values"
  opt :brightness, brightness_help, type: :integer
  opt :temperature, temperature_help, type: :integer
end

options = options.select { |_k, v| v }
options[:on] = false if options.delete(:off)
if options.delete(:defaults)
  options = {
    brightness: ENV["ELGATO_DEFAULT_BRIGHTNESS"].to_i,
    temperature: ENV["ELGATO_DEFAULT_TEMPERATURE"].to_i
  }.merge(options)
end

api_client = LightMeUp::ApiClient.new(ip_address: options[:ip_address])

begin
  LightMeUp::SettingsUpdate.new(api_client, options).perform
rescue LightMeUp::SettingsUpdate::ToggleIncompatible => e
  Optimist.die :toggle, e.message
rescue LightMeUp::SettingsUpdate::NoOptionsGiven
  Optimist.educate
rescue LightMeUp::Error => e
  warn e.message
  exit 1
end
